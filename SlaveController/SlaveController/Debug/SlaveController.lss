
SlaveController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000be0  00000c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800066  00800066  00000c7a  2**0
                  ALLOC
  3 .stab         000016b0  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000027f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f7  00000000  00000000  00002990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074c  00000000  00000000  00004087  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c45  00000000  00000000  000047d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00005418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  0000579c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f2  00000000  00000000  00005e62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <main>
  8a:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED_vInit>:


#include "LED.h"

void LED_vInit(LED * led,PORTS PORT,uint8 PIN_NUM)
{
  92:	fc 01       	movw	r30, r24
  94:	86 2f       	mov	r24, r22
	led->PIN_NUM = PIN_NUM;
  96:	41 83       	std	Z+1, r20	; 0x01
	led->PORT = PORT;
  98:	60 83       	st	Z, r22
	DIO_vSetPinDirection(PORT,PIN_NUM,DIO_OUTPUT);
  9a:	64 2f       	mov	r22, r20
  9c:	4f ef       	ldi	r20, 0xFF	; 255
  9e:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
}
  a2:	08 95       	ret

000000a4 <LED_vTurnOn>:

void LED_vTurnOn(LED * led)
{
  a4:	fc 01       	movw	r30, r24
	DIO_vWritePin(led->PORT,led->PIN_NUM,DIO_HIGH);	
  a6:	80 81       	ld	r24, Z
  a8:	61 81       	ldd	r22, Z+1	; 0x01
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
}
  b0:	08 95       	ret

000000b2 <LED_vTurnOFF>:

void LED_vTurnOFF(LED * led)
{
  b2:	fc 01       	movw	r30, r24
	DIO_vWritePin(led->PORT,led->PIN_NUM,DIO_LOW);
  b4:	80 81       	ld	r24, Z
  b6:	61 81       	ldd	r22, Z+1	; 0x01
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
}
  be:	08 95       	ret

000000c0 <LED_vToggle>:

void LED_vToggle(LED * led)
{
  c0:	fc 01       	movw	r30, r24
	DIO_vTogglepin(led->PORT,led->PIN_NUM);
  c2:	80 81       	ld	r24, Z
  c4:	61 81       	ldd	r22, Z+1	; 0x01
  c6:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_vTogglepin>
  ca:	08 95       	ret

000000cc <Seg_vInit>:
#define USING_BCD_DECODER
#ifdef USING_BCD_DECODER


void Seg_vInit(SevenSeg_BCD * seg,PORTS port,uint8 P1,uint8 P2,uint8 P3,uint8 P4)
{
  cc:	ef 92       	push	r14
  ce:	0f 93       	push	r16
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  d6:	86 2f       	mov	r24, r22
	seg->PIN_NUM_1 = P1;
  d8:	49 83       	std	Y+1, r20	; 0x01
	seg->PIN_NUM_2 = P2;
  da:	2a 83       	std	Y+2, r18	; 0x02
	seg->PIN_NUM_3 = P3;
  dc:	0b 83       	std	Y+3, r16	; 0x03
	seg->PIN_NUM_4 = P4;
  de:	ec 82       	std	Y+4, r14	; 0x04
	seg->PORT = port;
  e0:	68 83       	st	Y, r22
	DIO_vSetPinDirection(seg->PORT,seg->PIN_NUM_1,DIO_OUTPUT);
  e2:	64 2f       	mov	r22, r20
  e4:	4f ef       	ldi	r20, 0xFF	; 255
  e6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(seg->PORT,seg->PIN_NUM_2,DIO_OUTPUT);
  ea:	88 81       	ld	r24, Y
  ec:	6a 81       	ldd	r22, Y+2	; 0x02
  ee:	4f ef       	ldi	r20, 0xFF	; 255
  f0:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(seg->PORT,seg->PIN_NUM_3,DIO_OUTPUT);
  f4:	88 81       	ld	r24, Y
  f6:	6b 81       	ldd	r22, Y+3	; 0x03
  f8:	4f ef       	ldi	r20, 0xFF	; 255
  fa:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(seg->PORT,seg->PIN_NUM_4,DIO_OUTPUT);
  fe:	88 81       	ld	r24, Y
 100:	6c 81       	ldd	r22, Y+4	; 0x04
 102:	4f ef       	ldi	r20, 0xFF	; 255
 104:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	0f 91       	pop	r16
 10e:	ef 90       	pop	r14
 110:	08 95       	ret

00000112 <Seg_vDisplaySingle>:

void Seg_vDisplaySingle(SevenSeg_BCD * seg,uint8 Data)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
 11c:	c6 2f       	mov	r28, r22
	DIO_vWritePin(seg->PORT,seg->PIN_NUM_1,DIO_LOW);
 11e:	dc 01       	movw	r26, r24
 120:	8c 91       	ld	r24, X
 122:	11 96       	adiw	r26, 0x01	; 1
 124:	6c 91       	ld	r22, X
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
	DIO_vWritePin(seg->PORT,seg->PIN_NUM_2,DIO_LOW);
 12c:	f8 01       	movw	r30, r16
 12e:	80 81       	ld	r24, Z
 130:	62 81       	ldd	r22, Z+2	; 0x02
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
	DIO_vWritePin(seg->PORT,seg->PIN_NUM_3,DIO_LOW);
 138:	d8 01       	movw	r26, r16
 13a:	8c 91       	ld	r24, X
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	6c 91       	ld	r22, X
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
	DIO_vWritePin(seg->PORT,seg->PIN_NUM_4,DIO_LOW);
 146:	f8 01       	movw	r30, r16
 148:	80 81       	ld	r24, Z
 14a:	64 81       	ldd	r22, Z+4	; 0x04
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
	
	PORT(seg->PORT) |= (Data <<seg->PIN_NUM_1);
 152:	d8 01       	movw	r26, r16
 154:	8c 91       	ld	r24, X
 156:	0e 94 4a 02 	call	0x494	; 0x494 <Get_PORT>
 15a:	fc 01       	movw	r30, r24
 15c:	20 81       	ld	r18, Z
 15e:	8c 2f       	mov	r24, r28
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	ec 01       	movw	r28, r24
 164:	d8 01       	movw	r26, r16
 166:	11 96       	adiw	r26, 0x01	; 1
 168:	0c 90       	ld	r0, X
 16a:	11 97       	sbiw	r26, 0x01	; 1
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Seg_vDisplaySingle+0x60>
 16e:	cc 0f       	add	r28, r28
 170:	dd 1f       	adc	r29, r29
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <Seg_vDisplaySingle+0x5c>
 176:	c2 2b       	or	r28, r18
 178:	c0 83       	st	Z, r28
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <Seg_vDisplayDual>:
void Seg_vDisplayDual(SevenSeg_BCD * seg_units,SevenSeg_BCD * Seg_Tens,uint8 Data)
{
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
 18c:	9b 01       	movw	r18, r22
 18e:	84 2f       	mov	r24, r20
	if (Data> 100)
 190:	45 36       	cpi	r20, 0x65	; 101
 192:	08 f0       	brcs	.+2      	; 0x196 <Seg_vDisplayDual+0x12>
	{
		Data = 99;
 194:	83 e6       	ldi	r24, 0x63	; 99
	}
	if (Data< 0)
	{
		Data = 0;
	}
	uint8 unit = Data%10;
 196:	6a e0       	ldi	r22, 0x0A	; 10
 198:	0e 94 ac 05 	call	0xb58	; 0xb58 <__udivmodqi4>
 19c:	68 2f       	mov	r22, r24
 19e:	19 2f       	mov	r17, r25
	if (unit > 9)
	{
		unit = 9;
	}

	Seg_vDisplaySingle(Seg_Tens,Data/10);
 1a0:	c9 01       	movw	r24, r18
 1a2:	0e 94 89 00 	call	0x112	; 0x112 <Seg_vDisplaySingle>
	Seg_vDisplaySingle(seg_units,unit);
 1a6:	61 2f       	mov	r22, r17
 1a8:	1a 30       	cpi	r17, 0x0A	; 10
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <Seg_vDisplayDual+0x2a>
 1ac:	69 e0       	ldi	r22, 0x09	; 9
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 89 00 	call	0x112	; 0x112 <Seg_vDisplaySingle>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	08 95       	ret

000001bc <ADC_vInit>:
{
	
	/* the are all from Data Sheet */
	
	/* adjust pre scaler */
	switch (preScaler)
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	d1 f0       	breq	.+52     	; 0x1f4 <ADC_vInit+0x38>
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	28 f4       	brcc	.+10     	; 0x1ce <ADC_vInit+0x12>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	71 f0       	breq	.+28     	; 0x1e4 <ADC_vInit+0x28>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	80 f4       	brcc	.+32     	; 0x1ec <ADC_vInit+0x30>
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <ADC_vInit+0x20>
 1ce:	85 30       	cpi	r24, 0x05	; 5
 1d0:	c9 f0       	breq	.+50     	; 0x204 <ADC_vInit+0x48>
 1d2:	85 30       	cpi	r24, 0x05	; 5
 1d4:	98 f0       	brcs	.+38     	; 0x1fc <ADC_vInit+0x40>
 1d6:	86 30       	cpi	r24, 0x06	; 6
 1d8:	e1 f4       	brne	.+56     	; 0x212 <ADC_vInit+0x56>
 1da:	18 c0       	rjmp	.+48     	; 0x20c <ADC_vInit+0x50>
	{
		case ADC_Scale_2:
		SET_BIT(ADCSRA,ADPS0);
 1dc:	30 9a       	sbi	0x06, 0	; 6
		CLR_BIT(ADCSRA,ADPS1);
 1de:	31 98       	cbi	0x06, 1	; 6
		CLR_BIT(ADCSRA,ADPS2);
 1e0:	32 98       	cbi	0x06, 2	; 6
		break;
 1e2:	17 c0       	rjmp	.+46     	; 0x212 <ADC_vInit+0x56>
		case ADC_Scale_4:
		CLR_BIT(ADCSRA,ADPS0);
 1e4:	30 98       	cbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
 1e6:	31 9a       	sbi	0x06, 1	; 6
		CLR_BIT(ADCSRA,ADPS2);
 1e8:	32 98       	cbi	0x06, 2	; 6
		break;
 1ea:	13 c0       	rjmp	.+38     	; 0x212 <ADC_vInit+0x56>
		case ADC_Scale_8:
		SET_BIT(ADCSRA,ADPS0);
 1ec:	30 9a       	sbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
 1ee:	31 9a       	sbi	0x06, 1	; 6
		CLR_BIT(ADCSRA,ADPS2);
 1f0:	32 98       	cbi	0x06, 2	; 6
		break;
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <ADC_vInit+0x56>
		case ADC_Scale_16:
		CLR_BIT(ADCSRA,ADPS0);
 1f4:	30 98       	cbi	0x06, 0	; 6
		CLR_BIT(ADCSRA,ADPS1);
 1f6:	31 98       	cbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS2);
 1f8:	32 9a       	sbi	0x06, 2	; 6
		break;
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <ADC_vInit+0x56>
		case ADC_Scale_32:
		SET_BIT(ADCSRA,ADPS0);
 1fc:	30 9a       	sbi	0x06, 0	; 6
		CLR_BIT(ADCSRA,ADPS1);
 1fe:	31 98       	cbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS2);
 200:	32 9a       	sbi	0x06, 2	; 6
		break;
 202:	07 c0       	rjmp	.+14     	; 0x212 <ADC_vInit+0x56>
		case ADC_Scale_64:
		CLR_BIT(ADCSRA,ADPS0);
 204:	30 98       	cbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
 206:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS2);
 208:	32 9a       	sbi	0x06, 2	; 6
		break;
 20a:	03 c0       	rjmp	.+6      	; 0x212 <ADC_vInit+0x56>
		case ADC_Scale_128:
		SET_BIT(ADCSRA,ADPS0);
 20c:	30 9a       	sbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
 20e:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS2);
 210:	32 9a       	sbi	0x06, 2	; 6
		
		break;
	}
	
	/* adjust vref */
	switch (vref)
 212:	61 30       	cpi	r22, 0x01	; 1
 214:	41 f0       	breq	.+16     	; 0x226 <ADC_vInit+0x6a>
 216:	61 30       	cpi	r22, 0x01	; 1
 218:	18 f0       	brcs	.+6      	; 0x220 <ADC_vInit+0x64>
 21a:	62 30       	cpi	r22, 0x02	; 2
 21c:	49 f4       	brne	.+18     	; 0x230 <ADC_vInit+0x74>
 21e:	06 c0       	rjmp	.+12     	; 0x22c <ADC_vInit+0x70>
	{
		case verf_AREF:
		CLR_BIT(ADMUX,REFS0);
 220:	3e 98       	cbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
 222:	3f 98       	cbi	0x07, 7	; 7
		break;
 224:	05 c0       	rjmp	.+10     	; 0x230 <ADC_vInit+0x74>
		case verf_AVCC:
		SET_BIT(ADMUX,REFS0);
 226:	3e 9a       	sbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
 228:	3f 98       	cbi	0x07, 7	; 7
		break;
 22a:	02 c0       	rjmp	.+4      	; 0x230 <ADC_vInit+0x74>
		case verf_Internal:
		SET_BIT(ADMUX,REFS0);
 22c:	3e 9a       	sbi	0x07, 6	; 7
		SET_BIT(ADMUX,REFS1);
 22e:	3f 9a       	sbi	0x07, 7	; 7
		/* Your code here */
		break;
	}
	
	/* Enable ADC */
	SET_BIT(ADCSRA,ADEN);
 230:	37 9a       	sbi	0x06, 7	; 6
}
 232:	08 95       	ret

00000234 <ADC_u16Read>:

uint16 ADC_u16Read(uint8 Channel)
{
	/*Check Channel From Tabel 84 datasheet */
	ADMUX |= Channel;
 234:	97 b1       	in	r25, 0x07	; 7
 236:	89 2b       	or	r24, r25
 238:	87 b9       	out	0x07, r24	; 7
	
	/* stat conversion */
	SET_BIT(ADCSRA,ADSC);
 23a:	36 9a       	sbi	0x06, 6	; 6
	
	/* Check Flag Finished */
	while(!GET_BIT(ADCSRA,ADIF))
 23c:	86 b1       	in	r24, 0x06	; 6
 23e:	84 ff       	sbrs	r24, 4
 240:	fd cf       	rjmp	.-6      	; 0x23c <ADC_u16Read+0x8>
		/* wait */
	}
	
	/* Read ADC value */
	uint16 val = 0;
	val = (uint16)ADCL;
 242:	84 b1       	in	r24, 0x04	; 4
 244:	90 e0       	ldi	r25, 0x00	; 0
	val |= (uint16) (ADCH << 8);
 246:	45 b1       	in	r20, 0x05	; 5
 248:	34 2f       	mov	r19, r20
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	82 2b       	or	r24, r18
 24e:	93 2b       	or	r25, r19
	
	return val;
 250:	08 95       	ret

00000252 <DIO_vSetPinDirection>:
#include "DIO.h"

void DIO_vSetPinDirection(PORTS port,uint8 PIN_NUM,DIO_Directions Direction)
{		
	uint8_t volatile * DDR;
	switch (port)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	81 f0       	breq	.+32     	; 0x276 <DIO_vSetPinDirection+0x24>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	28 f0       	brcs	.+10     	; 0x264 <DIO_vSetPinDirection+0x12>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	31 f0       	breq	.+12     	; 0x26a <DIO_vSetPinDirection+0x18>
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	59 f5       	brne	.+86     	; 0x2b8 <DIO_vSetPinDirection+0x66>
 262:	06 c0       	rjmp	.+12     	; 0x270 <DIO_vSetPinDirection+0x1e>
	{
		case PORT_A:
			DDR = &DDRA;
 264:	ea e3       	ldi	r30, 0x3A	; 58
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	08 c0       	rjmp	.+16     	; 0x27a <DIO_vSetPinDirection+0x28>
			break;
		case PORT_B:
			DDR = &DDRB;
			break;
		case PORT_C:
			DDR = &DDRC;
 26a:	e4 e3       	ldi	r30, 0x34	; 52
 26c:	f0 e0       	ldi	r31, 0x00	; 0
			break;
 26e:	05 c0       	rjmp	.+10     	; 0x27a <DIO_vSetPinDirection+0x28>
		case PORT_D:
			DDR = &DDRD;
 270:	e1 e3       	ldi	r30, 0x31	; 49
 272:	f0 e0       	ldi	r31, 0x00	; 0
			break;
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_vSetPinDirection+0x28>
	{
		case PORT_A:
			DDR = &DDRA;
			break;
		case PORT_B:
			DDR = &DDRB;
 276:	e7 e3       	ldi	r30, 0x37	; 55
 278:	f0 e0       	ldi	r31, 0x00	; 0
		default:
			return;	
		break;
	}
	
	switch (Direction)
 27a:	44 23       	and	r20, r20
 27c:	19 f0       	breq	.+6      	; 0x284 <DIO_vSetPinDirection+0x32>
 27e:	4f 3f       	cpi	r20, 0xFF	; 255
 280:	d9 f4       	brne	.+54     	; 0x2b8 <DIO_vSetPinDirection+0x66>
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <DIO_vSetPinDirection+0x4e>
	{
		case DIO_INPUT:		
		CLR_BIT(*DDR,PIN_NUM);
 284:	20 81       	ld	r18, Z
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	ac 01       	movw	r20, r24
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_vSetPinDirection+0x40>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_vSetPinDirection+0x3c>
 296:	ba 01       	movw	r22, r20
 298:	60 95       	com	r22
 29a:	62 23       	and	r22, r18
 29c:	60 83       	st	Z, r22
		break;
 29e:	08 95       	ret
		case DIO_OUTPUT:
		SET_BIT(*DDR,PIN_NUM);
 2a0:	20 81       	ld	r18, Z
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vSetPinDirection+0x5c>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vSetPinDirection+0x58>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	60 83       	st	Z, r22
 2b8:	08 95       	ret

000002ba <DIO_vWritePin>:
}

void DIO_vWritePin(PORTS port,uint8 PIN_NUM,DIO_Values Value)
{
	uint8 volatile * PORT;
	switch (port)
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	81 f0       	breq	.+32     	; 0x2de <DIO_vWritePin+0x24>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	28 f0       	brcs	.+10     	; 0x2cc <DIO_vWritePin+0x12>
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	31 f0       	breq	.+12     	; 0x2d2 <DIO_vWritePin+0x18>
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	51 f5       	brne	.+84     	; 0x31e <DIO_vWritePin+0x64>
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <DIO_vWritePin+0x1e>
	{
		case PORT_A:
		PORT = &PORTA;
 2cc:	eb e3       	ldi	r30, 0x3B	; 59
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <DIO_vWritePin+0x28>
		break;
		case PORT_B:
		PORT = &PORTB;
		break;
		case PORT_C:
		PORT = &PORTC;
 2d2:	e5 e3       	ldi	r30, 0x35	; 53
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <DIO_vWritePin+0x28>
		case PORT_D:
		PORT = &PORTD;
 2d8:	e2 e3       	ldi	r30, 0x32	; 50
 2da:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_vWritePin+0x28>
	{
		case PORT_A:
		PORT = &PORTA;
		break;
		case PORT_B:
		PORT = &PORTB;
 2de:	e8 e3       	ldi	r30, 0x38	; 56
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
		default:
		return;
		break;
	}
	
	switch (Value)
 2e2:	44 23       	and	r20, r20
 2e4:	79 f0       	breq	.+30     	; 0x304 <DIO_vWritePin+0x4a>
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	d1 f4       	brne	.+52     	; 0x31e <DIO_vWritePin+0x64>
	{
		case DIO_HIGH:
		SET_BIT(*PORT,PIN_NUM);
 2ea:	20 81       	ld	r18, Z
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ac 01       	movw	r20, r24
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_vWritePin+0x3e>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_vWritePin+0x3a>
 2fc:	ba 01       	movw	r22, r20
 2fe:	62 2b       	or	r22, r18
 300:	60 83       	st	Z, r22
		break;
 302:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*PORT,PIN_NUM);
 304:	20 81       	ld	r18, Z
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	ac 01       	movw	r20, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_vWritePin+0x58>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_vWritePin+0x54>
 316:	ba 01       	movw	r22, r20
 318:	60 95       	com	r22
 31a:	62 23       	and	r22, r18
 31c:	60 83       	st	Z, r22
 31e:	08 95       	ret

00000320 <DIO_ReadPin>:
}

DIO_Values DIO_ReadPin(PORTS port,uint8 PIN_NUM)
{
	uint8 volatile * PIN;
	switch (port)
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	81 f0       	breq	.+32     	; 0x344 <DIO_ReadPin+0x24>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	28 f0       	brcs	.+10     	; 0x332 <DIO_ReadPin+0x12>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	31 f0       	breq	.+12     	; 0x338 <DIO_ReadPin+0x18>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	b1 f4       	brne	.+44     	; 0x35c <DIO_ReadPin+0x3c>
 330:	06 c0       	rjmp	.+12     	; 0x33e <DIO_ReadPin+0x1e>
	{
		case PORT_A:
		PIN = &PINA;
 332:	e9 e3       	ldi	r30, 0x39	; 57
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	08 c0       	rjmp	.+16     	; 0x348 <DIO_ReadPin+0x28>
		break;
		case PORT_B:
		PIN = &PINB;
		break;
		case PORT_C:
		PIN = &PINC;
 338:	e3 e3       	ldi	r30, 0x33	; 51
 33a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 33c:	05 c0       	rjmp	.+10     	; 0x348 <DIO_ReadPin+0x28>
		case PORT_D:
		PIN = &PIND;
 33e:	e0 e3       	ldi	r30, 0x30	; 48
 340:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_ReadPin+0x28>
	{
		case PORT_A:
		PIN = &PINA;
		break;
		case PORT_B:
		PIN = &PINB;
 344:	e6 e3       	ldi	r30, 0x36	; 54
 346:	f0 e0       	ldi	r31, 0x00	; 0
		break;
		default:
		return 0;
		break;
	}
	return GET_BIT(*PIN,PIN_NUM);
 348:	20 81       	ld	r18, Z
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	c9 01       	movw	r24, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_ReadPin+0x34>
 350:	95 95       	asr	r25
 352:	87 95       	ror	r24
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_ReadPin+0x30>
 358:	81 70       	andi	r24, 0x01	; 1
 35a:	08 95       	ret
		break;
		case PORT_D:
		PIN = &PIND;
		break;
		default:
		return 0;
 35c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return GET_BIT(*PIN,PIN_NUM);
}
 35e:	08 95       	ret

00000360 <DIO_vTogglepin>:

void DIO_vTogglepin(PORTS port, uint8 PIN_NUM){	
	uint8 volatile * PORT;
	switch (port)
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	81 f0       	breq	.+32     	; 0x384 <DIO_vTogglepin+0x24>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	28 f0       	brcs	.+10     	; 0x372 <DIO_vTogglepin+0x12>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	31 f0       	breq	.+12     	; 0x378 <DIO_vTogglepin+0x18>
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	c1 f4       	brne	.+48     	; 0x3a0 <DIO_vTogglepin+0x40>
 370:	06 c0       	rjmp	.+12     	; 0x37e <DIO_vTogglepin+0x1e>
	{
		case PORT_A:
		PORT = &PORTA;
 372:	eb e3       	ldi	r30, 0x3B	; 59
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	08 c0       	rjmp	.+16     	; 0x388 <DIO_vTogglepin+0x28>
		break;
		case PORT_B:
		PORT = &PORTB;
		break;
		case PORT_C:
		PORT = &PORTC;
 378:	e5 e3       	ldi	r30, 0x35	; 53
 37a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 37c:	05 c0       	rjmp	.+10     	; 0x388 <DIO_vTogglepin+0x28>
		case PORT_D:
		PORT = &PORTD;
 37e:	e2 e3       	ldi	r30, 0x32	; 50
 380:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_vTogglepin+0x28>
	{
		case PORT_A:
		PORT = &PORTA;
		break;
		case PORT_B:
		PORT = &PORTB;
 384:	e8 e3       	ldi	r30, 0x38	; 56
 386:	f0 e0       	ldi	r31, 0x00	; 0
		break;
		default:
		return;
		break;
	}
	TOGGLE_BIT(* PORT,PIN_NUM);
 388:	20 81       	ld	r18, Z
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	ac 01       	movw	r20, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_vTogglepin+0x36>
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_vTogglepin+0x32>
 39a:	ba 01       	movw	r22, r20
 39c:	62 27       	eor	r22, r18
 39e:	60 83       	st	Z, r22
 3a0:	08 95       	ret

000003a2 <DIO_vSet_PORT_Direction>:
}

void DIO_vSet_PORT_Direction(PORTS port,DIO_Directions Direction)
{
	uint8_t volatile * DDR;
	switch (port)
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	81 f0       	breq	.+32     	; 0x3c6 <DIO_vSet_PORT_Direction+0x24>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	28 f0       	brcs	.+10     	; 0x3b4 <DIO_vSet_PORT_Direction+0x12>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	31 f0       	breq	.+12     	; 0x3ba <DIO_vSet_PORT_Direction+0x18>
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	69 f4       	brne	.+26     	; 0x3cc <DIO_vSet_PORT_Direction+0x2a>
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <DIO_vSet_PORT_Direction+0x1e>
	{
		case PORT_A:
		DDR = &DDRA;
 3b4:	ea e3       	ldi	r30, 0x3A	; 58
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <DIO_vSet_PORT_Direction+0x28>
		break;
		case PORT_B:
		DDR = &DDRB;
		break;
		case PORT_C:
		DDR = &DDRC;
 3ba:	e4 e3       	ldi	r30, 0x34	; 52
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <DIO_vSet_PORT_Direction+0x28>
		case PORT_D:
		DDR = &DDRD;
 3c0:	e1 e3       	ldi	r30, 0x31	; 49
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_vSet_PORT_Direction+0x28>
	{
		case PORT_A:
		DDR = &DDRA;
		break;
		case PORT_B:
		DDR = &DDRB;
 3c6:	e7 e3       	ldi	r30, 0x37	; 55
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
		break;
		default:
		return;
		break;
	}
	* DDR = Direction;	
 3ca:	60 83       	st	Z, r22
 3cc:	08 95       	ret

000003ce <DIO_vWrite_PORT>:
}

void DIO_vWrite_PORT(PORTS port,uint8 value)
{
	uint8 volatile * PORT;
	switch (port)
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <DIO_vWrite_PORT+0x24>
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	28 f0       	brcs	.+10     	; 0x3e0 <DIO_vWrite_PORT+0x12>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	31 f0       	breq	.+12     	; 0x3e6 <DIO_vWrite_PORT+0x18>
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	69 f4       	brne	.+26     	; 0x3f8 <DIO_vWrite_PORT+0x2a>
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <DIO_vWrite_PORT+0x1e>
	{
		case PORT_A:
		PORT = &PORTA;
 3e0:	eb e3       	ldi	r30, 0x3B	; 59
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <DIO_vWrite_PORT+0x28>
		break;
		case PORT_B:
		PORT = &PORTB;
		break;
		case PORT_C:
		PORT = &PORTC;
 3e6:	e5 e3       	ldi	r30, 0x35	; 53
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <DIO_vWrite_PORT+0x28>
		case PORT_D:
		PORT = &PORTD;
 3ec:	e2 e3       	ldi	r30, 0x32	; 50
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_vWrite_PORT+0x28>
	{
		case PORT_A:
		PORT = &PORTA;
		break;
		case PORT_B:
		PORT = &PORTB;
 3f2:	e8 e3       	ldi	r30, 0x38	; 56
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
		break;
		default:
		return;
		break;
	}
	* PORT = value;
 3f6:	60 83       	st	Z, r22
 3f8:	08 95       	ret

000003fa <DIO_GetPinDirection>:
}

DIO_Directions DIO_GetPinDirection(PORTS port,uint8 PIN_NUM)
{
	uint8_t volatile * DDR;
	switch (port)
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	81 f0       	breq	.+32     	; 0x41e <DIO_GetPinDirection+0x24>
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	28 f0       	brcs	.+10     	; 0x40c <DIO_GetPinDirection+0x12>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	31 f0       	breq	.+12     	; 0x412 <DIO_GetPinDirection+0x18>
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	c1 f4       	brne	.+48     	; 0x43a <DIO_GetPinDirection+0x40>
 40a:	06 c0       	rjmp	.+12     	; 0x418 <DIO_GetPinDirection+0x1e>
	{
		case PORT_A:
		DDR = &DDRA;
 40c:	ea e3       	ldi	r30, 0x3A	; 58
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	08 c0       	rjmp	.+16     	; 0x422 <DIO_GetPinDirection+0x28>
		break;
		case PORT_B:
		DDR = &DDRB;
		break;
		case PORT_C:
		DDR = &DDRC;
 412:	e4 e3       	ldi	r30, 0x34	; 52
 414:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 416:	05 c0       	rjmp	.+10     	; 0x422 <DIO_GetPinDirection+0x28>
		case PORT_D:
		DDR = &DDRD;
 418:	e1 e3       	ldi	r30, 0x31	; 49
 41a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_GetPinDirection+0x28>
	{
		case PORT_A:
		DDR = &DDRA;
		break;
		case PORT_B:
		DDR = &DDRB;
 41e:	e7 e3       	ldi	r30, 0x37	; 55
 420:	f0 e0       	ldi	r31, 0x00	; 0
		break;
		default:
		return 0;
		break;
	}	
	if (GET_BIT(* DDR,PIN_NUM))
 422:	80 81       	ld	r24, Z
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	9c 01       	movw	r18, r24
 428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_GetPinDirection+0x34>
 42a:	35 95       	asr	r19
 42c:	27 95       	ror	r18
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_GetPinDirection+0x30>
 432:	20 ff       	sbrs	r18, 0
 434:	04 c0       	rjmp	.+8      	; 0x43e <DIO_GetPinDirection+0x44>
	{
		return DIO_OUTPUT;
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	08 95       	ret
		break;
		case PORT_D:
		DDR = &DDRD;
		break;
		default:
		return 0;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
	}	
	if (GET_BIT(* DDR,PIN_NUM))
	{
		return DIO_OUTPUT;
	}else{
		return DIO_INPUT;
 43e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 440:	08 95       	ret

00000442 <DIO_vWrite_PORT_Masked>:

void DIO_vWrite_PORT_Masked(PORTS port,uint8 value,MASK mask)
{
	uint8 volatile * PORT;
	switch (port)
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	81 f0       	breq	.+32     	; 0x466 <DIO_vWrite_PORT_Masked+0x24>
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	28 f0       	brcs	.+10     	; 0x454 <DIO_vWrite_PORT_Masked+0x12>
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	31 f0       	breq	.+12     	; 0x45a <DIO_vWrite_PORT_Masked+0x18>
 44e:	83 30       	cpi	r24, 0x03	; 3
 450:	01 f5       	brne	.+64     	; 0x492 <DIO_vWrite_PORT_Masked+0x50>
 452:	06 c0       	rjmp	.+12     	; 0x460 <DIO_vWrite_PORT_Masked+0x1e>
	{
		case PORT_A:
		PORT = &PORTA;
 454:	eb e3       	ldi	r30, 0x3B	; 59
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	08 c0       	rjmp	.+16     	; 0x46a <DIO_vWrite_PORT_Masked+0x28>
		break;
		case PORT_B:
		PORT = &PORTB;
		break;
		case PORT_C:
		PORT = &PORTC;
 45a:	e5 e3       	ldi	r30, 0x35	; 53
 45c:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 45e:	05 c0       	rjmp	.+10     	; 0x46a <DIO_vWrite_PORT_Masked+0x28>
		case PORT_D:
		PORT = &PORTD;
 460:	e2 e3       	ldi	r30, 0x32	; 50
 462:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_vWrite_PORT_Masked+0x28>
	{
		case PORT_A:
		PORT = &PORTA;
		break;
		case PORT_B:
		PORT = &PORTB;
 466:	e8 e3       	ldi	r30, 0x38	; 56
 468:	f0 e0       	ldi	r31, 0x00	; 0
		default:
		return;
		break;
	}
	
	switch (mask)
 46a:	44 23       	and	r20, r20
 46c:	19 f0       	breq	.+6      	; 0x474 <DIO_vWrite_PORT_Masked+0x32>
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	81 f4       	brne	.+32     	; 0x492 <DIO_vWrite_PORT_Masked+0x50>
 472:	08 c0       	rjmp	.+16     	; 0x484 <DIO_vWrite_PORT_Masked+0x42>
	{
		case DIO_LEFT_MASK:
		*PORT &= 0x0F;	/* clear bits where we will right */	
 474:	80 81       	ld	r24, Z
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	80 83       	st	Z, r24
		*PORT |= (value & 0xF0);  /* write the bits to where we need */
 47a:	80 81       	ld	r24, Z
 47c:	60 7f       	andi	r22, 0xF0	; 240
 47e:	68 2b       	or	r22, r24
 480:	60 83       	st	Z, r22
		break;
 482:	08 95       	ret
		case DIO_RIGHT_MASK:
		*PORT &= 0xF0;	/* clear bits where we will right */
 484:	80 81       	ld	r24, Z
 486:	80 7f       	andi	r24, 0xF0	; 240
 488:	80 83       	st	Z, r24
		*PORT |= (value & 0x0F);  /* write the bits to where we need */
 48a:	80 81       	ld	r24, Z
 48c:	6f 70       	andi	r22, 0x0F	; 15
 48e:	68 2b       	or	r22, r24
 490:	60 83       	st	Z, r22
 492:	08 95       	ret

00000494 <Get_PORT>:
}

uint8_t volatile * Get_PORT(PORTS port)
{
	uint8 volatile * PORT;
	switch (port)
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	39 f0       	breq	.+14     	; 0x4a6 <Get_PORT+0x12>
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	70 f0       	brcs	.+28     	; 0x4b8 <Get_PORT+0x24>
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	31 f0       	breq	.+12     	; 0x4ac <Get_PORT+0x18>
 4a0:	83 30       	cpi	r24, 0x03	; 3
 4a2:	61 f4       	brne	.+24     	; 0x4bc <Get_PORT+0x28>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <Get_PORT+0x1e>
	{
		case PORT_A:
		PORT = &PORTA;
		break;
		case PORT_B:
		PORT = &PORTB;
 4a6:	28 e3       	ldi	r18, 0x38	; 56
 4a8:	30 e0       	ldi	r19, 0x00	; 0
		break;
 4aa:	08 c0       	rjmp	.+16     	; 0x4bc <Get_PORT+0x28>
		case PORT_C:
		PORT = &PORTC;
 4ac:	25 e3       	ldi	r18, 0x35	; 53
 4ae:	30 e0       	ldi	r19, 0x00	; 0
		break;
 4b0:	05 c0       	rjmp	.+10     	; 0x4bc <Get_PORT+0x28>
		case PORT_D:
		PORT = &PORTD;
 4b2:	22 e3       	ldi	r18, 0x32	; 50
 4b4:	30 e0       	ldi	r19, 0x00	; 0
		break;
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <Get_PORT+0x28>
{
	uint8 volatile * PORT;
	switch (port)
	{
		case PORT_A:
		PORT = &PORTA;
 4b8:	2b e3       	ldi	r18, 0x3B	; 59
 4ba:	30 e0       	ldi	r19, 0x00	; 0
		break;
		default:
		break;
	}
	return PORT;
}
 4bc:	82 2f       	mov	r24, r18
 4be:	93 2f       	mov	r25, r19
 4c0:	08 95       	ret

000004c2 <Get_DDR>:

uint8_t volatile * Get_DDR(PORTS port)
{
	uint8 volatile * PORT;
	switch (port)
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	39 f0       	breq	.+14     	; 0x4d4 <Get_DDR+0x12>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	70 f0       	brcs	.+28     	; 0x4e6 <Get_DDR+0x24>
 4ca:	82 30       	cpi	r24, 0x02	; 2
 4cc:	31 f0       	breq	.+12     	; 0x4da <Get_DDR+0x18>
 4ce:	83 30       	cpi	r24, 0x03	; 3
 4d0:	61 f4       	brne	.+24     	; 0x4ea <Get_DDR+0x28>
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <Get_DDR+0x1e>
	{
		case PORT_A:
		PORT = &DDRA;
		break;
		case PORT_B:
		PORT = &DDRB;
 4d4:	27 e3       	ldi	r18, 0x37	; 55
 4d6:	30 e0       	ldi	r19, 0x00	; 0
		break;
 4d8:	08 c0       	rjmp	.+16     	; 0x4ea <Get_DDR+0x28>
		case PORT_C:
		PORT = &DDRC;
 4da:	24 e3       	ldi	r18, 0x34	; 52
 4dc:	30 e0       	ldi	r19, 0x00	; 0
		break;
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <Get_DDR+0x28>
		case PORT_D:
		PORT = &DDRD;
 4e0:	21 e3       	ldi	r18, 0x31	; 49
 4e2:	30 e0       	ldi	r19, 0x00	; 0
		break;
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <Get_DDR+0x28>
{
	uint8 volatile * PORT;
	switch (port)
	{
		case PORT_A:
		PORT = &DDRA;
 4e6:	2a e3       	ldi	r18, 0x3A	; 58
 4e8:	30 e0       	ldi	r19, 0x00	; 0
		break;
		default:
		break;
	}
	return PORT;
}
 4ea:	82 2f       	mov	r24, r18
 4ec:	93 2f       	mov	r25, r19
 4ee:	08 95       	ret

000004f0 <Get_PIN>:

uint8_t volatile * Get_PIN(PORTS port)
{
	uint8 volatile * PORT;
	switch (port)
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	39 f0       	breq	.+14     	; 0x502 <Get_PIN+0x12>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	70 f0       	brcs	.+28     	; 0x514 <Get_PIN+0x24>
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	31 f0       	breq	.+12     	; 0x508 <Get_PIN+0x18>
 4fc:	83 30       	cpi	r24, 0x03	; 3
 4fe:	61 f4       	brne	.+24     	; 0x518 <Get_PIN+0x28>
 500:	06 c0       	rjmp	.+12     	; 0x50e <Get_PIN+0x1e>
	{
		case PORT_A:
		PORT = &PINA;
		break;
		case PORT_B:
		PORT = &PINB;
 502:	26 e3       	ldi	r18, 0x36	; 54
 504:	30 e0       	ldi	r19, 0x00	; 0
		break;
 506:	08 c0       	rjmp	.+16     	; 0x518 <Get_PIN+0x28>
		case PORT_C:
		PORT = &PINC;
 508:	23 e3       	ldi	r18, 0x33	; 51
 50a:	30 e0       	ldi	r19, 0x00	; 0
		break;
 50c:	05 c0       	rjmp	.+10     	; 0x518 <Get_PIN+0x28>
		case PORT_D:
		PORT = &PIND;
 50e:	20 e3       	ldi	r18, 0x30	; 48
 510:	30 e0       	ldi	r19, 0x00	; 0
		break;
 512:	02 c0       	rjmp	.+4      	; 0x518 <Get_PIN+0x28>
{
	uint8 volatile * PORT;
	switch (port)
	{
		case PORT_A:
		PORT = &PINA;
 514:	29 e3       	ldi	r18, 0x39	; 57
 516:	30 e0       	ldi	r19, 0x00	; 0
		break;
		default:
		break;
	}
	return PORT;
}
 518:	82 2f       	mov	r24, r18
 51a:	93 2f       	mov	r25, r19
 51c:	08 95       	ret

0000051e <SPI_Init_Master>:
#define START_CMD "*"

void SPI_Init_Master(void)
{
	/* Config Master / Slave */
	SET_BIT(SPCR,MSTR);	
 51e:	6c 9a       	sbi	0x0d, 4	; 13
	/* config clock speed 128 for Atmega32  */
	SET_BIT(SPCR,SPR0);
 520:	68 9a       	sbi	0x0d, 0	; 13
	SET_BIT(SPCR,SPR1);
 522:	69 9a       	sbi	0x0d, 1	; 13
	/* config DDR MOSI/SS/SCK */
	DIO_vSetPinDirection(PORT_B,SS,DIO_OUTPUT);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	64 e0       	ldi	r22, 0x04	; 4
 528:	4f ef       	ldi	r20, 0xFF	; 255
 52a:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_B,MOSI,DIO_OUTPUT);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	65 e0       	ldi	r22, 0x05	; 5
 532:	4f ef       	ldi	r20, 0xFF	; 255
 534:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_B,SCK,DIO_OUTPUT);
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	67 e0       	ldi	r22, 0x07	; 7
 53c:	4f ef       	ldi	r20, 0xFF	; 255
 53e:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	/* PUT SS High (Turn Off Slave) */
	DIO_vWritePin(PORT_B,SS,DIO_HIGH);
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	64 e0       	ldi	r22, 0x04	; 4
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
	/* Enable SPI peripheral */
	SET_BIT(SPCR,SPE);	
 54c:	6e 9a       	sbi	0x0d, 6	; 13
}
 54e:	08 95       	ret

00000550 <SPI_Init_Slave>:

void SPI_Init_Slave(void)
{
	/* Config Master / Slave */
	CLR_BIT(SPCR,MSTR);
 550:	6c 98       	cbi	0x0d, 4	; 13
	/* config DDR MISO */
	DIO_vSetPinDirection(PORT_B,MISO,DIO_OUTPUT);
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	66 e0       	ldi	r22, 0x06	; 6
 556:	4f ef       	ldi	r20, 0xFF	; 255
 558:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	/* Enable SPI peripheral */
	SET_BIT(SPCR,SPE);
 55c:	6e 9a       	sbi	0x0d, 6	; 13
}
 55e:	08 95       	ret

00000560 <SPI_Init_Slave_interrupt>:

void SPI_Init_Slave_interrupt(void)
{
	/* Config Master / Slave */
	CLR_BIT(SPCR,MSTR);
 560:	6c 98       	cbi	0x0d, 4	; 13
	/* config DDR MISO */
	DIO_vSetPinDirection(PORT_B,MISO,DIO_OUTPUT);
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	66 e0       	ldi	r22, 0x06	; 6
 566:	4f ef       	ldi	r20, 0xFF	; 255
 568:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vSetPinDirection>
	/* Enable SPI Interrupt peripheral */
	SET_BIT(SPCR,SPIE);
 56c:	6f 9a       	sbi	0x0d, 7	; 13
	/* Enable SPI peripheral */
	SET_BIT(SPCR,SPE);
 56e:	6e 9a       	sbi	0x0d, 6	; 13
	/* Enable Global Interrupts */
	sei();
 570:	78 94       	sei
}
 572:	08 95       	ret

00000574 <SPI_Master_Transmit>:

void SPI_Master_Transmit(uint8 Data)
{
 574:	cf 93       	push	r28
 576:	c8 2f       	mov	r28, r24
	/* Enable SS */
	DIO_vWritePin(PORT_B,SS,DIO_LOW);
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	64 e0       	ldi	r22, 0x04	; 4
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
	/* PUT Data to SPDR */
	SPDR = Data;
 582:	cf b9       	out	0x0f, r28	; 15
	/* Check transmission is Done */
	while (GET_BIT(SPSR,SPIF) == 0)
 584:	77 9b       	sbis	0x0e, 7	; 14
 586:	fe cf       	rjmp	.-4      	; 0x584 <SPI_Master_Transmit+0x10>
	{
		/* when finished SPIF is set to 1 */
	}
	/* Disable SS */
	DIO_vWritePin(PORT_B,SS,DIO_HIGH);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	64 e0       	ldi	r22, 0x04	; 4
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_vWritePin>
}
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <SPI_u8Slave_Read>:

uint8 SPI_u8Slave_Read()
{
	while(GET_BIT(SPSR,SPIF) == 0)
 596:	77 9b       	sbis	0x0e, 7	; 14
 598:	fe cf       	rjmp	.-4      	; 0x596 <SPI_u8Slave_Read>
	{
		/* wait For Data */
	}
	return SPDR;
 59a:	8f b1       	in	r24, 0x0f	; 15
}
 59c:	08 95       	ret

0000059e <SPI_GetCMD>:

uint8 SPI_GetCMD()
{
	if (SPI_u8Slave_Read() == '*')
 59e:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_u8Slave_Read>
 5a2:	8a 32       	cpi	r24, 0x2A	; 42
 5a4:	19 f4       	brne	.+6      	; 0x5ac <SPI_GetCMD+0xe>
		{
			return SPI_u8Slave_Read();
 5a6:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_u8Slave_Read>
 5aa:	08 95       	ret
		}
}
 5ac:	08 95       	ret

000005ae <SPI_SEND_STRING>:

void SPI_SEND_STRING(uint8 * str)
{
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	ec 01       	movw	r28, r24
	while(*str)
 5b4:	88 81       	ld	r24, Y
 5b6:	88 23       	and	r24, r24
 5b8:	31 f0       	breq	.+12     	; 0x5c6 <SPI_SEND_STRING+0x18>
		{
			return SPI_u8Slave_Read();
		}
}

void SPI_SEND_STRING(uint8 * str)
 5ba:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str)
	{
		SPI_Master_Transmit(*str++);
 5bc:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_Master_Transmit>
		}
}

void SPI_SEND_STRING(uint8 * str)
{
	while(*str)
 5c0:	89 91       	ld	r24, Y+
 5c2:	88 23       	and	r24, r24
 5c4:	d9 f7       	brne	.-10     	; 0x5bc <SPI_SEND_STRING+0xe>
	{
		SPI_Master_Transmit(*str++);
	}
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <SPI_SendCMD>:

void SPI_SendCMD(uint8 cmd,uint8 value)
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	d8 2f       	mov	r29, r24
 5d2:	c6 2f       	mov	r28, r22
	SPI_SEND_STRING(START_CMD);
 5d4:	80 e6       	ldi	r24, 0x60	; 96
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SPI_SEND_STRING>
	SPI_Master_Transmit(cmd);
 5dc:	8d 2f       	mov	r24, r29
 5de:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_Master_Transmit>
	SPI_Master_Transmit(value);
 5e2:	8c 2f       	mov	r24, r28
 5e4:	0e 94 ba 02 	call	0x574	; 0x574 <SPI_Master_Transmit>
}
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <Timer0_vInit>:
	timer0.Mode = Timer_CTC;
	timer0.ocr = 125;
	Timer0_vInit(&timer0);
}
void Timer0_vInit(Timer * timer)
{
 5ee:	fc 01       	movw	r30, r24
	/*choose Mode*/
	switch (timer->Mode)
 5f0:	84 81       	ldd	r24, Z+4	; 0x04
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	71 f0       	breq	.+28     	; 0x612 <Timer0_vInit+0x24>
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	28 f0       	brcs	.+10     	; 0x604 <Timer0_vInit+0x16>
 5fa:	82 30       	cpi	r24, 0x02	; 2
 5fc:	89 f0       	breq	.+34     	; 0x620 <Timer0_vInit+0x32>
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	e1 f4       	brne	.+56     	; 0x63a <Timer0_vInit+0x4c>
 602:	15 c0       	rjmp	.+42     	; 0x62e <Timer0_vInit+0x40>
	{
		case Timer_Normal:
		CLR_BIT(TCCR0,WGM00);
 604:	83 b7       	in	r24, 0x33	; 51
 606:	8f 7b       	andi	r24, 0xBF	; 191
 608:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
 60a:	83 b7       	in	r24, 0x33	; 51
 60c:	87 7f       	andi	r24, 0xF7	; 247
 60e:	83 bf       	out	0x33, r24	; 51
		break;
 610:	14 c0       	rjmp	.+40     	; 0x63a <Timer0_vInit+0x4c>
		case Timer_CTC:
		CLR_BIT(TCCR0,WGM00);
 612:	83 b7       	in	r24, 0x33	; 51
 614:	8f 7b       	andi	r24, 0xBF	; 191
 616:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
 618:	83 b7       	in	r24, 0x33	; 51
 61a:	88 60       	ori	r24, 0x08	; 8
 61c:	83 bf       	out	0x33, r24	; 51
		break;
 61e:	0d c0       	rjmp	.+26     	; 0x63a <Timer0_vInit+0x4c>
		case Timer_PWM:
		SET_BIT(TCCR0,WGM00);
 620:	83 b7       	in	r24, 0x33	; 51
 622:	80 64       	ori	r24, 0x40	; 64
 624:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
 626:	83 b7       	in	r24, 0x33	; 51
 628:	87 7f       	andi	r24, 0xF7	; 247
 62a:	83 bf       	out	0x33, r24	; 51
		break;
 62c:	06 c0       	rjmp	.+12     	; 0x63a <Timer0_vInit+0x4c>
		case Timer_FastPWM:
		SET_BIT(TCCR0,WGM00);
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	80 64       	ori	r24, 0x40	; 64
 632:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
 634:	83 b7       	in	r24, 0x33	; 51
 636:	88 60       	ori	r24, 0x08	; 8
 638:	83 bf       	out	0x33, r24	; 51
		default:
		/* Your code here */
		break;
	}
	
	OCR0 = timer->ocr;
 63a:	86 81       	ldd	r24, Z+6	; 0x06
 63c:	8c bf       	out	0x3c, r24	; 60
	
	/* Choose Prescaler */
	switch (timer->ClockSource)
 63e:	85 81       	ldd	r24, Z+5	; 0x05
 640:	83 30       	cpi	r24, 0x03	; 3
 642:	81 f1       	breq	.+96     	; 0x6a4 <Timer0_vInit+0xb6>
 644:	84 30       	cpi	r24, 0x04	; 4
 646:	28 f4       	brcc	.+10     	; 0x652 <Timer0_vInit+0x64>
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	c1 f0       	breq	.+48     	; 0x67c <Timer0_vInit+0x8e>
 64c:	82 30       	cpi	r24, 0x02	; 2
 64e:	00 f5       	brcc	.+64     	; 0x690 <Timer0_vInit+0xa2>
 650:	0b c0       	rjmp	.+22     	; 0x668 <Timer0_vInit+0x7a>
 652:	85 30       	cpi	r24, 0x05	; 5
 654:	d9 f1       	breq	.+118    	; 0x6cc <Timer0_vInit+0xde>
 656:	85 30       	cpi	r24, 0x05	; 5
 658:	78 f1       	brcs	.+94     	; 0x6b8 <Timer0_vInit+0xca>
 65a:	86 30       	cpi	r24, 0x06	; 6
 65c:	09 f4       	brne	.+2      	; 0x660 <Timer0_vInit+0x72>
 65e:	40 c0       	rjmp	.+128    	; 0x6e0 <Timer0_vInit+0xf2>
 660:	87 30       	cpi	r24, 0x07	; 7
 662:	09 f0       	breq	.+2      	; 0x666 <Timer0_vInit+0x78>
 664:	50 c0       	rjmp	.+160    	; 0x706 <Timer0_vInit+0x118>
 666:	46 c0       	rjmp	.+140    	; 0x6f4 <Timer0_vInit+0x106>
	{
		case t_Stoped:
		CLR_BIT(TCCR0,CS00);
 668:	83 b7       	in	r24, 0x33	; 51
 66a:	8e 7f       	andi	r24, 0xFE	; 254
 66c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	8d 7f       	andi	r24, 0xFD	; 253
 672:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
 674:	83 b7       	in	r24, 0x33	; 51
 676:	8b 7f       	andi	r24, 0xFB	; 251
 678:	83 bf       	out	0x33, r24	; 51
		break;
 67a:	08 95       	ret
		case t_clock:
		SET_BIT(TCCR0,CS00);
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	81 60       	ori	r24, 0x01	; 1
 680:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
 682:	83 b7       	in	r24, 0x33	; 51
 684:	8d 7f       	andi	r24, 0xFD	; 253
 686:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
 688:	83 b7       	in	r24, 0x33	; 51
 68a:	8b 7f       	andi	r24, 0xFB	; 251
 68c:	83 bf       	out	0x33, r24	; 51
		break;
 68e:	08 95       	ret
		case t_clock8th:
		CLR_BIT(TCCR0,CS00);
 690:	83 b7       	in	r24, 0x33	; 51
 692:	8e 7f       	andi	r24, 0xFE	; 254
 694:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
 696:	83 b7       	in	r24, 0x33	; 51
 698:	82 60       	ori	r24, 0x02	; 2
 69a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
 69c:	83 b7       	in	r24, 0x33	; 51
 69e:	8b 7f       	andi	r24, 0xFB	; 251
 6a0:	83 bf       	out	0x33, r24	; 51
		break;
 6a2:	08 95       	ret
		case t_clock64th:
		SET_BIT(TCCR0,CS00);
 6a4:	83 b7       	in	r24, 0x33	; 51
 6a6:	81 60       	ori	r24, 0x01	; 1
 6a8:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
 6aa:	83 b7       	in	r24, 0x33	; 51
 6ac:	82 60       	ori	r24, 0x02	; 2
 6ae:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
 6b0:	83 b7       	in	r24, 0x33	; 51
 6b2:	8b 7f       	andi	r24, 0xFB	; 251
 6b4:	83 bf       	out	0x33, r24	; 51
		break;
 6b6:	08 95       	ret
		case t_clock256th:
		CLR_BIT(TCCR0,CS00);
 6b8:	83 b7       	in	r24, 0x33	; 51
 6ba:	8e 7f       	andi	r24, 0xFE	; 254
 6bc:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
 6be:	83 b7       	in	r24, 0x33	; 51
 6c0:	8d 7f       	andi	r24, 0xFD	; 253
 6c2:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
 6c4:	83 b7       	in	r24, 0x33	; 51
 6c6:	84 60       	ori	r24, 0x04	; 4
 6c8:	83 bf       	out	0x33, r24	; 51
		break;
 6ca:	08 95       	ret
		case t_clock1024th:
		SET_BIT(TCCR0,CS00);
 6cc:	83 b7       	in	r24, 0x33	; 51
 6ce:	81 60       	ori	r24, 0x01	; 1
 6d0:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
 6d2:	83 b7       	in	r24, 0x33	; 51
 6d4:	8d 7f       	andi	r24, 0xFD	; 253
 6d6:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
 6d8:	83 b7       	in	r24, 0x33	; 51
 6da:	84 60       	ori	r24, 0x04	; 4
 6dc:	83 bf       	out	0x33, r24	; 51
		break;
 6de:	08 95       	ret
		case t_clockFE:
		CLR_BIT(TCCR0,CS00);
 6e0:	83 b7       	in	r24, 0x33	; 51
 6e2:	8e 7f       	andi	r24, 0xFE	; 254
 6e4:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	84 60       	ori	r24, 0x04	; 4
 6f0:	83 bf       	out	0x33, r24	; 51
		break;
 6f2:	08 95       	ret
		case t_clockRE:
		SET_BIT(TCCR0,CS00);
 6f4:	83 b7       	in	r24, 0x33	; 51
 6f6:	81 60       	ori	r24, 0x01	; 1
 6f8:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
 6fa:	83 b7       	in	r24, 0x33	; 51
 6fc:	82 60       	ori	r24, 0x02	; 2
 6fe:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
 700:	83 b7       	in	r24, 0x33	; 51
 702:	84 60       	ori	r24, 0x04	; 4
 704:	83 bf       	out	0x33, r24	; 51
 706:	08 95       	ret

00000708 <Timer0_v1msInit>:
#include "Timer.h"

void Timer0_v1msInit()
{
	//values to give 1ms tick
	timer0.ClockSource = t_clock64th;
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	80 93 6c 00 	sts	0x006C, r24
	timer0.Mode = Timer_CTC;
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	80 93 6b 00 	sts	0x006B, r24
	timer0.ocr = 125;
 714:	8d e7       	ldi	r24, 0x7D	; 125
 716:	80 93 6d 00 	sts	0x006D, r24
	Timer0_vInit(&timer0);
 71a:	87 e6       	ldi	r24, 0x67	; 103
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Timer0_vInit>
}
 722:	08 95       	ret

00000724 <Timer0_vStart>:
		break;
	}
}
void Timer0_vStart(){
	/*enable ocieo from timsk register*/
	SET_BIT(TIMSK,OCIE0);
 724:	89 b7       	in	r24, 0x39	; 57
 726:	82 60       	ori	r24, 0x02	; 2
 728:	89 bf       	out	0x39, r24	; 57
}
 72a:	08 95       	ret

0000072c <Timer0_vStop>:
void Timer0_vStop(){
	/*enable ocieo from timsk register*/
	CLR_BIT(TIMSK,OCIE0);
 72c:	89 b7       	in	r24, 0x39	; 57
 72e:	8d 7f       	andi	r24, 0xFD	; 253
 730:	89 bf       	out	0x39, r24	; 57
}
 732:	08 95       	ret

00000734 <Timer_u16PassedSeconed>:

uint16 Timer_u16PassedSeconed(Timer * timer){
	return (uint16)(timer->TimerOverFlows / 1000);
 734:	fc 01       	movw	r30, r24
 736:	60 81       	ld	r22, Z
 738:	71 81       	ldd	r23, Z+1	; 0x01
 73a:	82 81       	ldd	r24, Z+2	; 0x02
 73c:	93 81       	ldd	r25, Z+3	; 0x03
 73e:	28 ee       	ldi	r18, 0xE8	; 232
 740:	33 e0       	ldi	r19, 0x03	; 3
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	0e 94 cc 05 	call	0xb98	; 0xb98 <__udivmodsi4>
}
 74a:	82 2f       	mov	r24, r18
 74c:	93 2f       	mov	r25, r19
 74e:	08 95       	ret

00000750 <Timer_u16PassedMinutes>:

uint16 Timer_u16PassedMinutes(Timer * timer){
	return (uint16) (Timer_u16PassedSeconed(timer)/60);
 750:	0e 94 9a 03 	call	0x734	; 0x734 <Timer_u16PassedSeconed>
 754:	6c e3       	ldi	r22, 0x3C	; 60
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	0e 94 b8 05 	call	0xb70	; 0xb70 <__udivmodhi4>
 75c:	86 2f       	mov	r24, r22
 75e:	97 2f       	mov	r25, r23
}
 760:	08 95       	ret

00000762 <AC_Check>:
	}
	return 0;
}

void AC_Check()
{	
 762:	cf 93       	push	r28
	/* the AC on = to desired value +3 to prevent fast on off on small temp changes */
	AC_On_Threshold = AC_OFF_threshold +3;
 764:	80 91 64 00 	lds	r24, 0x0064
 768:	8d 5f       	subi	r24, 0xFD	; 253
 76a:	80 93 65 00 	sts	0x0065, r24
	/* Display Required value */
	Seg_vDisplayDual(&Units_Seg, &Tens_Seg ,AC_OFF_threshold);
 76e:	40 91 64 00 	lds	r20, 0x0064
 772:	8e e6       	ldi	r24, 0x6E	; 110
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	65 e7       	ldi	r22, 0x75	; 117
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	0e 94 c2 00 	call	0x184	; 0x184 <Seg_vDisplayDual>
	/* Get Sensor reading using ADC */
	uint8 Temp = ADC_to_Temp(ADC_u16Read(ADC_Channel0));
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0e 94 1a 01 	call	0x234	; 0x234 <ADC_u16Read>
}

/* Conversation Equation For LM35 module */
static uint8 ADC_to_Temp(uint16 ADC_val)
{
	return (uint8)(ADC_val/(2*2.048f));
 784:	bc 01       	movw	r22, r24
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
 78e:	2f e6       	ldi	r18, 0x6F	; 111
 790:	32 e1       	ldi	r19, 0x12	; 18
 792:	43 e8       	ldi	r20, 0x83	; 131
 794:	50 e4       	ldi	r21, 0x40	; 64
 796:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 79a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fixunssfsi>
 79e:	c6 2f       	mov	r28, r22
	/* decide if ac should be turned on or off */	
	if (Temp >= AC_On_Threshold)
 7a0:	80 91 65 00 	lds	r24, 0x0065
 7a4:	c8 17       	cp	r28, r24
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <AC_Check+0x4e>
	{
		LED_vTurnOn(&AC_Unit);
 7a8:	8c e7       	ldi	r24, 0x7C	; 124
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_vTurnOn>
	}
	if (Temp <=AC_OFF_threshold)
 7b0:	80 91 64 00 	lds	r24, 0x0064
 7b4:	8c 17       	cp	r24, r28
 7b6:	20 f0       	brcs	.+8      	; 0x7c0 <AC_Check+0x5e>
	{
		LED_vTurnOFF(&AC_Unit);
 7b8:	8c e7       	ldi	r24, 0x7C	; 124
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_vTurnOFF>
	}
}
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <main>:
void AC_Check();

int main(void)
{
	/* SPI initialize using interrupt */
	SPI_Init_Slave_interrupt();
 7c4:	0e 94 b0 02 	call	0x560	; 0x560 <SPI_Init_Slave_interrupt>
	/* LED Initialize (as Rooms) */
	LED_vInit(&Room1,PORT_D,7);
 7c8:	8a e7       	ldi	r24, 0x7A	; 122
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	63 e0       	ldi	r22, 0x03	; 3
 7ce:	47 e0       	ldi	r20, 0x07	; 7
 7d0:	0e 94 49 00 	call	0x92	; 0x92 <LED_vInit>
	LED_vInit(&Room2,PORT_D,6);
 7d4:	83 e7       	ldi	r24, 0x73	; 115
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	63 e0       	ldi	r22, 0x03	; 3
 7da:	46 e0       	ldi	r20, 0x06	; 6
 7dc:	0e 94 49 00 	call	0x92	; 0x92 <LED_vInit>
	LED_vInit(&AC_Unit,PORT_D,5);
 7e0:	8c e7       	ldi	r24, 0x7C	; 124
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	63 e0       	ldi	r22, 0x03	; 3
 7e6:	45 e0       	ldi	r20, 0x05	; 5
 7e8:	0e 94 49 00 	call	0x92	; 0x92 <LED_vInit>
	/* Seven segment Initialize */
	Seg_vInit(&Tens_Seg,PORT_C,4,5,6,7);
 7ec:	0f 2e       	mov	r0, r31
 7ee:	f5 e7       	ldi	r31, 0x75	; 117
 7f0:	cf 2e       	mov	r12, r31
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	df 2e       	mov	r13, r31
 7f6:	f0 2d       	mov	r31, r0
 7f8:	c6 01       	movw	r24, r12
 7fa:	62 e0       	ldi	r22, 0x02	; 2
 7fc:	44 e0       	ldi	r20, 0x04	; 4
 7fe:	25 e0       	ldi	r18, 0x05	; 5
 800:	06 e0       	ldi	r16, 0x06	; 6
 802:	0f 2e       	mov	r0, r31
 804:	f7 e0       	ldi	r31, 0x07	; 7
 806:	ef 2e       	mov	r14, r31
 808:	f0 2d       	mov	r31, r0
 80a:	0e 94 66 00 	call	0xcc	; 0xcc <Seg_vInit>
	Seg_vInit(&Units_Seg,PORT_C,0,1,2,3);
 80e:	ce e6       	ldi	r28, 0x6E	; 110
 810:	d0 e0       	ldi	r29, 0x00	; 0
 812:	ce 01       	movw	r24, r28
 814:	62 e0       	ldi	r22, 0x02	; 2
 816:	40 e0       	ldi	r20, 0x00	; 0
 818:	21 e0       	ldi	r18, 0x01	; 1
 81a:	02 e0       	ldi	r16, 0x02	; 2
 81c:	0f 2e       	mov	r0, r31
 81e:	f3 e0       	ldi	r31, 0x03	; 3
 820:	ef 2e       	mov	r14, r31
 822:	f0 2d       	mov	r31, r0
 824:	0e 94 66 00 	call	0xcc	; 0xcc <Seg_vInit>
	/* ADC for Temp sensor Initialize */
	ADC_vInit(ADC_Scale_128,verf_Internal);
 828:	86 e0       	ldi	r24, 0x06	; 6
 82a:	62 e0       	ldi	r22, 0x02	; 2
 82c:	0e 94 de 00 	call	0x1bc	; 0x1bc <ADC_vInit>
	
	
	/* main Code */
	Seg_vDisplayDual(&Units_Seg, &Tens_Seg ,AC_OFF_threshold);
 830:	40 91 64 00 	lds	r20, 0x0064
 834:	ce 01       	movw	r24, r28
 836:	b6 01       	movw	r22, r12
 838:	0e 94 c2 00 	call	0x184	; 0x184 <Seg_vDisplayDual>
	while(1)
	{
		/*Check AC state*/
		AC_Check();
 83c:	0e 94 b1 03 	call	0x762	; 0x762 <AC_Check>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	91 ee       	ldi	r25, 0xE1	; 225
 844:	a4 e0       	ldi	r26, 0x04	; 4
 846:	81 50       	subi	r24, 0x01	; 1
 848:	90 40       	sbci	r25, 0x00	; 0
 84a:	a0 40       	sbci	r26, 0x00	; 0
 84c:	e1 f7       	brne	.-8      	; 0x846 <main+0x82>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <main+0x8c>
 850:	00 00       	nop
 852:	f4 cf       	rjmp	.-24     	; 0x83c <main+0x78>

00000854 <__vector_12>:

volatile boolean WaitCMD = TRUE;
volatile boolean WaitValue = TRUE;
volatile uint8 CMD = 0;
ISR(SPI_STC_vect)
{
 854:	1f 92       	push	r1
 856:	0f 92       	push	r0
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	0f 92       	push	r0
 85c:	11 24       	eor	r1, r1
 85e:	2f 93       	push	r18
 860:	3f 93       	push	r19
 862:	4f 93       	push	r20
 864:	5f 93       	push	r21
 866:	6f 93       	push	r22
 868:	7f 93       	push	r23
 86a:	8f 93       	push	r24
 86c:	9f 93       	push	r25
 86e:	af 93       	push	r26
 870:	bf 93       	push	r27
 872:	ef 93       	push	r30
 874:	ff 93       	push	r31
	if (WaitCMD)
 876:	80 91 63 00 	lds	r24, 0x0063
 87a:	88 23       	and	r24, r24
 87c:	51 f0       	breq	.+20     	; 0x892 <__stack+0x33>
	{
		if (SPI_u8Slave_Read() == '*')
 87e:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_u8Slave_Read>
 882:	8a 32       	cpi	r24, 0x2A	; 42
 884:	19 f4       	brne	.+6      	; 0x88c <__stack+0x2d>
		{
			WaitCMD = FALSE;
 886:	10 92 63 00 	sts	0x0063, r1
			return;
 88a:	33 c0       	rjmp	.+102    	; 0x8f2 <__stack+0x93>
		}
		uint8 dummy = SPI_u8Slave_Read();
 88c:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_u8Slave_Read>
		return;
 890:	30 c0       	rjmp	.+96     	; 0x8f2 <__stack+0x93>
	}
	if (WaitValue)
 892:	80 91 62 00 	lds	r24, 0x0062
 896:	88 23       	and	r24, r24
 898:	39 f0       	breq	.+14     	; 0x8a8 <__stack+0x49>
	{
		CMD = SPI_u8Slave_Read();
 89a:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_u8Slave_Read>
 89e:	80 93 66 00 	sts	0x0066, r24
		WaitValue = FALSE;
 8a2:	10 92 62 00 	sts	0x0062, r1
		return;
 8a6:	25 c0       	rjmp	.+74     	; 0x8f2 <__stack+0x93>
	}
	uint8 val = SPI_u8Slave_Read();
 8a8:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_u8Slave_Read>
	
	if (CMD == ROOM_CMD)
 8ac:	90 91 66 00 	lds	r25, 0x0066
 8b0:	99 23       	and	r25, r25
 8b2:	71 f4       	brne	.+28     	; 0x8d0 <__stack+0x71>
	{
		if (val == 1)
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	29 f4       	brne	.+10     	; 0x8c2 <__stack+0x63>
		{
			LED_vToggle(&Room1);
 8b8:	8a e7       	ldi	r24, 0x7A	; 122
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 60 00 	call	0xc0	; 0xc0 <LED_vToggle>
 8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <__stack+0x89>
		}
		if (val == 2)
 8c2:	82 30       	cpi	r24, 0x02	; 2
 8c4:	89 f4       	brne	.+34     	; 0x8e8 <__stack+0x89>
		{
			LED_vToggle(&Room2);
 8c6:	83 e7       	ldi	r24, 0x73	; 115
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 60 00 	call	0xc0	; 0xc0 <LED_vToggle>
 8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <__stack+0x89>
		}
	}else if (CMD == AC_CMD)
 8d0:	90 91 66 00 	lds	r25, 0x0066
 8d4:	91 30       	cpi	r25, 0x01	; 1
 8d6:	41 f4       	brne	.+16     	; 0x8e8 <__stack+0x89>
	{
		AC_OFF_threshold = val;
 8d8:	80 93 64 00 	sts	0x0064, r24
		if (val > 40)
 8dc:	89 32       	cpi	r24, 0x29	; 41
 8de:	20 f0       	brcs	.+8      	; 0x8e8 <__stack+0x89>
		LED_vToggle(&Room2);
 8e0:	83 e7       	ldi	r24, 0x73	; 115
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 60 00 	call	0xc0	; 0xc0 <LED_vToggle>
	}	
	WaitCMD = TRUE;
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	80 93 63 00 	sts	0x0063, r24
	WaitValue = TRUE;
 8ee:	80 93 62 00 	sts	0x0062, r24
 8f2:	ff 91       	pop	r31
 8f4:	ef 91       	pop	r30
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	7f 91       	pop	r23
 900:	6f 91       	pop	r22
 902:	5f 91       	pop	r21
 904:	4f 91       	pop	r20
 906:	3f 91       	pop	r19
 908:	2f 91       	pop	r18
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <__divsf3>:
 914:	0c d0       	rcall	.+24     	; 0x92e <__divsf3x>
 916:	e6 c0       	rjmp	.+460    	; 0xae4 <__fp_round>
 918:	de d0       	rcall	.+444    	; 0xad6 <__fp_pscB>
 91a:	40 f0       	brcs	.+16     	; 0x92c <__divsf3+0x18>
 91c:	d5 d0       	rcall	.+426    	; 0xac8 <__fp_pscA>
 91e:	30 f0       	brcs	.+12     	; 0x92c <__divsf3+0x18>
 920:	21 f4       	brne	.+8      	; 0x92a <__divsf3+0x16>
 922:	5f 3f       	cpi	r21, 0xFF	; 255
 924:	19 f0       	breq	.+6      	; 0x92c <__divsf3+0x18>
 926:	c7 c0       	rjmp	.+398    	; 0xab6 <__fp_inf>
 928:	51 11       	cpse	r21, r1
 92a:	10 c1       	rjmp	.+544    	; 0xb4c <__fp_szero>
 92c:	ca c0       	rjmp	.+404    	; 0xac2 <__fp_nan>

0000092e <__divsf3x>:
 92e:	eb d0       	rcall	.+470    	; 0xb06 <__fp_split3>
 930:	98 f3       	brcs	.-26     	; 0x918 <__divsf3+0x4>

00000932 <__divsf3_pse>:
 932:	99 23       	and	r25, r25
 934:	c9 f3       	breq	.-14     	; 0x928 <__divsf3+0x14>
 936:	55 23       	and	r21, r21
 938:	b1 f3       	breq	.-20     	; 0x926 <__divsf3+0x12>
 93a:	95 1b       	sub	r25, r21
 93c:	55 0b       	sbc	r21, r21
 93e:	bb 27       	eor	r27, r27
 940:	aa 27       	eor	r26, r26
 942:	62 17       	cp	r22, r18
 944:	73 07       	cpc	r23, r19
 946:	84 07       	cpc	r24, r20
 948:	38 f0       	brcs	.+14     	; 0x958 <__divsf3_pse+0x26>
 94a:	9f 5f       	subi	r25, 0xFF	; 255
 94c:	5f 4f       	sbci	r21, 0xFF	; 255
 94e:	22 0f       	add	r18, r18
 950:	33 1f       	adc	r19, r19
 952:	44 1f       	adc	r20, r20
 954:	aa 1f       	adc	r26, r26
 956:	a9 f3       	breq	.-22     	; 0x942 <__divsf3_pse+0x10>
 958:	33 d0       	rcall	.+102    	; 0x9c0 <__divsf3_pse+0x8e>
 95a:	0e 2e       	mov	r0, r30
 95c:	3a f0       	brmi	.+14     	; 0x96c <__divsf3_pse+0x3a>
 95e:	e0 e8       	ldi	r30, 0x80	; 128
 960:	30 d0       	rcall	.+96     	; 0x9c2 <__divsf3_pse+0x90>
 962:	91 50       	subi	r25, 0x01	; 1
 964:	50 40       	sbci	r21, 0x00	; 0
 966:	e6 95       	lsr	r30
 968:	00 1c       	adc	r0, r0
 96a:	ca f7       	brpl	.-14     	; 0x95e <__divsf3_pse+0x2c>
 96c:	29 d0       	rcall	.+82     	; 0x9c0 <__divsf3_pse+0x8e>
 96e:	fe 2f       	mov	r31, r30
 970:	27 d0       	rcall	.+78     	; 0x9c0 <__divsf3_pse+0x8e>
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	bb 1f       	adc	r27, r27
 97a:	26 17       	cp	r18, r22
 97c:	37 07       	cpc	r19, r23
 97e:	48 07       	cpc	r20, r24
 980:	ab 07       	cpc	r26, r27
 982:	b0 e8       	ldi	r27, 0x80	; 128
 984:	09 f0       	breq	.+2      	; 0x988 <__divsf3_pse+0x56>
 986:	bb 0b       	sbc	r27, r27
 988:	80 2d       	mov	r24, r0
 98a:	bf 01       	movw	r22, r30
 98c:	ff 27       	eor	r31, r31
 98e:	93 58       	subi	r25, 0x83	; 131
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	2a f0       	brmi	.+10     	; 0x99e <__divsf3_pse+0x6c>
 994:	9e 3f       	cpi	r25, 0xFE	; 254
 996:	51 05       	cpc	r21, r1
 998:	68 f0       	brcs	.+26     	; 0x9b4 <__divsf3_pse+0x82>
 99a:	8d c0       	rjmp	.+282    	; 0xab6 <__fp_inf>
 99c:	d7 c0       	rjmp	.+430    	; 0xb4c <__fp_szero>
 99e:	5f 3f       	cpi	r21, 0xFF	; 255
 9a0:	ec f3       	brlt	.-6      	; 0x99c <__divsf3_pse+0x6a>
 9a2:	98 3e       	cpi	r25, 0xE8	; 232
 9a4:	dc f3       	brlt	.-10     	; 0x99c <__divsf3_pse+0x6a>
 9a6:	86 95       	lsr	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b7 95       	ror	r27
 9ae:	f7 95       	ror	r31
 9b0:	9f 5f       	subi	r25, 0xFF	; 255
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__divsf3_pse+0x74>
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret
 9c0:	e1 e0       	ldi	r30, 0x01	; 1
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	bb 1f       	adc	r27, r27
 9ca:	62 17       	cp	r22, r18
 9cc:	73 07       	cpc	r23, r19
 9ce:	84 07       	cpc	r24, r20
 9d0:	ba 07       	cpc	r27, r26
 9d2:	20 f0       	brcs	.+8      	; 0x9dc <__divsf3_pse+0xaa>
 9d4:	62 1b       	sub	r22, r18
 9d6:	73 0b       	sbc	r23, r19
 9d8:	84 0b       	sbc	r24, r20
 9da:	ba 0b       	sbc	r27, r26
 9dc:	ee 1f       	adc	r30, r30
 9de:	88 f7       	brcc	.-30     	; 0x9c2 <__divsf3_pse+0x90>
 9e0:	e0 95       	com	r30
 9e2:	08 95       	ret

000009e4 <__fixunssfsi>:
 9e4:	98 d0       	rcall	.+304    	; 0xb16 <__fp_splitA>
 9e6:	88 f0       	brcs	.+34     	; 0xa0a <__fixunssfsi+0x26>
 9e8:	9f 57       	subi	r25, 0x7F	; 127
 9ea:	90 f0       	brcs	.+36     	; 0xa10 <__fixunssfsi+0x2c>
 9ec:	b9 2f       	mov	r27, r25
 9ee:	99 27       	eor	r25, r25
 9f0:	b7 51       	subi	r27, 0x17	; 23
 9f2:	a0 f0       	brcs	.+40     	; 0xa1c <__fixunssfsi+0x38>
 9f4:	d1 f0       	breq	.+52     	; 0xa2a <__fixunssfsi+0x46>
 9f6:	66 0f       	add	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	1a f0       	brmi	.+6      	; 0xa06 <__fixunssfsi+0x22>
 a00:	ba 95       	dec	r27
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__fixunssfsi+0x12>
 a04:	12 c0       	rjmp	.+36     	; 0xa2a <__fixunssfsi+0x46>
 a06:	b1 30       	cpi	r27, 0x01	; 1
 a08:	81 f0       	breq	.+32     	; 0xa2a <__fixunssfsi+0x46>
 a0a:	9f d0       	rcall	.+318    	; 0xb4a <__fp_zero>
 a0c:	b1 e0       	ldi	r27, 0x01	; 1
 a0e:	08 95       	ret
 a10:	9c c0       	rjmp	.+312    	; 0xb4a <__fp_zero>
 a12:	67 2f       	mov	r22, r23
 a14:	78 2f       	mov	r23, r24
 a16:	88 27       	eor	r24, r24
 a18:	b8 5f       	subi	r27, 0xF8	; 248
 a1a:	39 f0       	breq	.+14     	; 0xa2a <__fixunssfsi+0x46>
 a1c:	b9 3f       	cpi	r27, 0xF9	; 249
 a1e:	cc f3       	brlt	.-14     	; 0xa12 <__fixunssfsi+0x2e>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b3 95       	inc	r27
 a28:	d9 f7       	brne	.-10     	; 0xa20 <__fixunssfsi+0x3c>
 a2a:	3e f4       	brtc	.+14     	; 0xa3a <__fixunssfsi+0x56>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	08 95       	ret

00000a3c <__floatunsisf>:
 a3c:	e8 94       	clt
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__floatsisf+0x12>

00000a40 <__floatsisf>:
 a40:	97 fb       	bst	r25, 7
 a42:	3e f4       	brtc	.+14     	; 0xa52 <__floatsisf+0x12>
 a44:	90 95       	com	r25
 a46:	80 95       	com	r24
 a48:	70 95       	com	r23
 a4a:	61 95       	neg	r22
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	99 23       	and	r25, r25
 a54:	a9 f0       	breq	.+42     	; 0xa80 <__floatsisf+0x40>
 a56:	f9 2f       	mov	r31, r25
 a58:	96 e9       	ldi	r25, 0x96	; 150
 a5a:	bb 27       	eor	r27, r27
 a5c:	93 95       	inc	r25
 a5e:	f6 95       	lsr	r31
 a60:	87 95       	ror	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b7 95       	ror	r27
 a68:	f1 11       	cpse	r31, r1
 a6a:	f8 cf       	rjmp	.-16     	; 0xa5c <__floatsisf+0x1c>
 a6c:	fa f4       	brpl	.+62     	; 0xaac <__floatsisf+0x6c>
 a6e:	bb 0f       	add	r27, r27
 a70:	11 f4       	brne	.+4      	; 0xa76 <__floatsisf+0x36>
 a72:	60 ff       	sbrs	r22, 0
 a74:	1b c0       	rjmp	.+54     	; 0xaac <__floatsisf+0x6c>
 a76:	6f 5f       	subi	r22, 0xFF	; 255
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <__floatsisf+0x6c>
 a80:	88 23       	and	r24, r24
 a82:	11 f0       	breq	.+4      	; 0xa88 <__floatsisf+0x48>
 a84:	96 e9       	ldi	r25, 0x96	; 150
 a86:	11 c0       	rjmp	.+34     	; 0xaaa <__floatsisf+0x6a>
 a88:	77 23       	and	r23, r23
 a8a:	21 f0       	breq	.+8      	; 0xa94 <__floatsisf+0x54>
 a8c:	9e e8       	ldi	r25, 0x8E	; 142
 a8e:	87 2f       	mov	r24, r23
 a90:	76 2f       	mov	r23, r22
 a92:	05 c0       	rjmp	.+10     	; 0xa9e <__floatsisf+0x5e>
 a94:	66 23       	and	r22, r22
 a96:	71 f0       	breq	.+28     	; 0xab4 <__floatsisf+0x74>
 a98:	96 e8       	ldi	r25, 0x86	; 134
 a9a:	86 2f       	mov	r24, r22
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	60 e0       	ldi	r22, 0x00	; 0
 aa0:	2a f0       	brmi	.+10     	; 0xaac <__floatsisf+0x6c>
 aa2:	9a 95       	dec	r25
 aa4:	66 0f       	add	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	da f7       	brpl	.-10     	; 0xaa2 <__floatsisf+0x62>
 aac:	88 0f       	add	r24, r24
 aae:	96 95       	lsr	r25
 ab0:	87 95       	ror	r24
 ab2:	97 f9       	bld	r25, 7
 ab4:	08 95       	ret

00000ab6 <__fp_inf>:
 ab6:	97 f9       	bld	r25, 7
 ab8:	9f 67       	ori	r25, 0x7F	; 127
 aba:	80 e8       	ldi	r24, 0x80	; 128
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	60 e0       	ldi	r22, 0x00	; 0
 ac0:	08 95       	ret

00000ac2 <__fp_nan>:
 ac2:	9f ef       	ldi	r25, 0xFF	; 255
 ac4:	80 ec       	ldi	r24, 0xC0	; 192
 ac6:	08 95       	ret

00000ac8 <__fp_pscA>:
 ac8:	00 24       	eor	r0, r0
 aca:	0a 94       	dec	r0
 acc:	16 16       	cp	r1, r22
 ace:	17 06       	cpc	r1, r23
 ad0:	18 06       	cpc	r1, r24
 ad2:	09 06       	cpc	r0, r25
 ad4:	08 95       	ret

00000ad6 <__fp_pscB>:
 ad6:	00 24       	eor	r0, r0
 ad8:	0a 94       	dec	r0
 ada:	12 16       	cp	r1, r18
 adc:	13 06       	cpc	r1, r19
 ade:	14 06       	cpc	r1, r20
 ae0:	05 06       	cpc	r0, r21
 ae2:	08 95       	ret

00000ae4 <__fp_round>:
 ae4:	09 2e       	mov	r0, r25
 ae6:	03 94       	inc	r0
 ae8:	00 0c       	add	r0, r0
 aea:	11 f4       	brne	.+4      	; 0xaf0 <__fp_round+0xc>
 aec:	88 23       	and	r24, r24
 aee:	52 f0       	brmi	.+20     	; 0xb04 <__fp_round+0x20>
 af0:	bb 0f       	add	r27, r27
 af2:	40 f4       	brcc	.+16     	; 0xb04 <__fp_round+0x20>
 af4:	bf 2b       	or	r27, r31
 af6:	11 f4       	brne	.+4      	; 0xafc <__fp_round+0x18>
 af8:	60 ff       	sbrs	r22, 0
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <__fp_round+0x20>
 afc:	6f 5f       	subi	r22, 0xFF	; 255
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	08 95       	ret

00000b06 <__fp_split3>:
 b06:	57 fd       	sbrc	r21, 7
 b08:	90 58       	subi	r25, 0x80	; 128
 b0a:	44 0f       	add	r20, r20
 b0c:	55 1f       	adc	r21, r21
 b0e:	59 f0       	breq	.+22     	; 0xb26 <__fp_splitA+0x10>
 b10:	5f 3f       	cpi	r21, 0xFF	; 255
 b12:	71 f0       	breq	.+28     	; 0xb30 <__fp_splitA+0x1a>
 b14:	47 95       	ror	r20

00000b16 <__fp_splitA>:
 b16:	88 0f       	add	r24, r24
 b18:	97 fb       	bst	r25, 7
 b1a:	99 1f       	adc	r25, r25
 b1c:	61 f0       	breq	.+24     	; 0xb36 <__fp_splitA+0x20>
 b1e:	9f 3f       	cpi	r25, 0xFF	; 255
 b20:	79 f0       	breq	.+30     	; 0xb40 <__fp_splitA+0x2a>
 b22:	87 95       	ror	r24
 b24:	08 95       	ret
 b26:	12 16       	cp	r1, r18
 b28:	13 06       	cpc	r1, r19
 b2a:	14 06       	cpc	r1, r20
 b2c:	55 1f       	adc	r21, r21
 b2e:	f2 cf       	rjmp	.-28     	; 0xb14 <__fp_split3+0xe>
 b30:	46 95       	lsr	r20
 b32:	f1 df       	rcall	.-30     	; 0xb16 <__fp_splitA>
 b34:	08 c0       	rjmp	.+16     	; 0xb46 <__fp_splitA+0x30>
 b36:	16 16       	cp	r1, r22
 b38:	17 06       	cpc	r1, r23
 b3a:	18 06       	cpc	r1, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	f1 cf       	rjmp	.-30     	; 0xb22 <__fp_splitA+0xc>
 b40:	86 95       	lsr	r24
 b42:	71 05       	cpc	r23, r1
 b44:	61 05       	cpc	r22, r1
 b46:	08 94       	sec
 b48:	08 95       	ret

00000b4a <__fp_zero>:
 b4a:	e8 94       	clt

00000b4c <__fp_szero>:
 b4c:	bb 27       	eor	r27, r27
 b4e:	66 27       	eor	r22, r22
 b50:	77 27       	eor	r23, r23
 b52:	cb 01       	movw	r24, r22
 b54:	97 f9       	bld	r25, 7
 b56:	08 95       	ret

00000b58 <__udivmodqi4>:
 b58:	99 1b       	sub	r25, r25
 b5a:	79 e0       	ldi	r23, 0x09	; 9
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__udivmodqi4_ep>

00000b5e <__udivmodqi4_loop>:
 b5e:	99 1f       	adc	r25, r25
 b60:	96 17       	cp	r25, r22
 b62:	08 f0       	brcs	.+2      	; 0xb66 <__udivmodqi4_ep>
 b64:	96 1b       	sub	r25, r22

00000b66 <__udivmodqi4_ep>:
 b66:	88 1f       	adc	r24, r24
 b68:	7a 95       	dec	r23
 b6a:	c9 f7       	brne	.-14     	; 0xb5e <__udivmodqi4_loop>
 b6c:	80 95       	com	r24
 b6e:	08 95       	ret

00000b70 <__udivmodhi4>:
 b70:	aa 1b       	sub	r26, r26
 b72:	bb 1b       	sub	r27, r27
 b74:	51 e1       	ldi	r21, 0x11	; 17
 b76:	07 c0       	rjmp	.+14     	; 0xb86 <__udivmodhi4_ep>

00000b78 <__udivmodhi4_loop>:
 b78:	aa 1f       	adc	r26, r26
 b7a:	bb 1f       	adc	r27, r27
 b7c:	a6 17       	cp	r26, r22
 b7e:	b7 07       	cpc	r27, r23
 b80:	10 f0       	brcs	.+4      	; 0xb86 <__udivmodhi4_ep>
 b82:	a6 1b       	sub	r26, r22
 b84:	b7 0b       	sbc	r27, r23

00000b86 <__udivmodhi4_ep>:
 b86:	88 1f       	adc	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	5a 95       	dec	r21
 b8c:	a9 f7       	brne	.-22     	; 0xb78 <__udivmodhi4_loop>
 b8e:	80 95       	com	r24
 b90:	90 95       	com	r25
 b92:	bc 01       	movw	r22, r24
 b94:	cd 01       	movw	r24, r26
 b96:	08 95       	ret

00000b98 <__udivmodsi4>:
 b98:	a1 e2       	ldi	r26, 0x21	; 33
 b9a:	1a 2e       	mov	r1, r26
 b9c:	aa 1b       	sub	r26, r26
 b9e:	bb 1b       	sub	r27, r27
 ba0:	fd 01       	movw	r30, r26
 ba2:	0d c0       	rjmp	.+26     	; 0xbbe <__udivmodsi4_ep>

00000ba4 <__udivmodsi4_loop>:
 ba4:	aa 1f       	adc	r26, r26
 ba6:	bb 1f       	adc	r27, r27
 ba8:	ee 1f       	adc	r30, r30
 baa:	ff 1f       	adc	r31, r31
 bac:	a2 17       	cp	r26, r18
 bae:	b3 07       	cpc	r27, r19
 bb0:	e4 07       	cpc	r30, r20
 bb2:	f5 07       	cpc	r31, r21
 bb4:	20 f0       	brcs	.+8      	; 0xbbe <__udivmodsi4_ep>
 bb6:	a2 1b       	sub	r26, r18
 bb8:	b3 0b       	sbc	r27, r19
 bba:	e4 0b       	sbc	r30, r20
 bbc:	f5 0b       	sbc	r31, r21

00000bbe <__udivmodsi4_ep>:
 bbe:	66 1f       	adc	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	99 1f       	adc	r25, r25
 bc6:	1a 94       	dec	r1
 bc8:	69 f7       	brne	.-38     	; 0xba4 <__udivmodsi4_loop>
 bca:	60 95       	com	r22
 bcc:	70 95       	com	r23
 bce:	80 95       	com	r24
 bd0:	90 95       	com	r25
 bd2:	9b 01       	movw	r18, r22
 bd4:	ac 01       	movw	r20, r24
 bd6:	bd 01       	movw	r22, r26
 bd8:	cf 01       	movw	r24, r30
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
